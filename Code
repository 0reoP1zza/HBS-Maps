public class Node implements Comparable<Node> { // Id for readability of result purposes private static int idCounter = 0;
public int id; // Parent in the path 
public Node parent = null; 
public List<Edge> neighbors; // Evaluation functions 
public double f = Double.MAX_VALUE; 
public double g = Double.MAX_VALUE; // Hardcoded heuristic 
public double h;

Node(double h){ 
this.h = h; this.id = idCounter++; this.neighbors = new ArrayList<>(); 
} 

public int compareTo(Node n) { 
return Double.compare(this.f, n.f); 
} 

public static class Edge { 
  Edge(int weight, Node node){ 
  this.weight = weight; this.node = node; 
  } 
  
  public int weight; 
  public Node node; 
} 

public void addBranch(int weight, Node node){ 
Edge newEdge = new Edge(weight, node); neighbors.add(newEdge); 
} 

public double calculateHeuristic(Node target){ 
return this.h; 
}



public int compareTo(RouteNode other) { if (this.estimatedScore > other.estimatedScore) { return 1; } else if (this.estimatedScore < other.estimatedScore) { return -1; } else { return 0; } } 

public class RouteFinder<T extends GraphNode> { private final Graph<T> graph; private final Scorer<T> nextNodeScorer; private final Scorer<T> targetScorer; public List<T> findRoute(T from, T to) { throw new IllegalStateException("No route found"); } } 

while (!openSet.isEmpty()) { RouteNode<T> next = openSet.poll(); if (next.getCurrent().equals(to)) { List<T> route = new ArrayList<>(); RouteNode<T> current = next; do { route.add(0, current.getCurrent()); current = allNodes.get(current.getPrevious()); } while (current != null); return route; } // 

graph.getConnections(next.getCurrent()).forEach(connection -> { RouteNode<T> nextNode = allNodes.getOrDefault(connection, new RouteNode<>(connection)); allNodes.put(connection, nextNode); Â  double newScore = next.getRouteScore() + nextNodeScorer.computeCost(next.getCurrent(), connection); if (newScore < nextNode.getRouteScore()) { nextNode.setPrevious(next.getCurrent()); nextNode.setRouteScore(newScore); nextNode.setEstimatedScore(newScore + targetScorer.computeCost(connection, to)); openSet.add(nextNode); } });
